// components/SettlementScreen.js
import React, { useState } from 'react';
import { View, Text, StyleSheet, TouchableOpacity, Alert, Share, ScrollView, Modal, Linking } from 'react-native';
import { splittingService } from '../services/SplittingService';

import RNHTMLtoPDF from 'react-native-html-to-pdf';
import QRCode from 'react-native-qrcode-svg';

const SettlementScreen = ({ splitResult, groupData, billData, historyId, paymentData, onComplete }) => {
  const [generatingPDF, setGeneratingPDF] = useState(false);
  const [generatingQR, setGeneratingQR] = useState(false);
  const [qrModalVisible, setQrModalVisible] = useState(false);
  const [qrCodes, setQrCodes] = useState([]);

  if (!groupData || !billData) {
    console.error("SettlementScreen: Required props (groupData, billData) are missing.", { splitResult, groupData, billData });
    return (
      <View style={styles.errorContainer}>
        <Text style={styles.errorText}>
          Error: Unable to load settlement details. Some data is missing.
        </Text>
        <TouchableOpacity style={styles.goBackButton} onPress={() => {
          Alert.alert('Data Error', 'Please go back and ensure the split was calculated correctly or try again from history.');
          if (onComplete) onComplete(); // Attempt to go back if possible
        }}>
          <Text style={styles.goBackButtonText}>Go Back / Try Again</Text>
        </TouchableOpacity>
      </View>
    );
  }

  // Also specifically check if the settlements array itself is missing or null within splitResult
    if (!splitResult) {
        console.error("SettlementScreen: splitResult is null or undefined.", { splitResult, groupData, billData });
        return (
        <View style={styles.errorContainer}>
          <Text style={styles.errorText}>
            Error: No calculation results found. Please recalculate the split.
          </Text>
          <TouchableOpacity style={styles.goBackButton} onPress={() => {
            Alert.alert('Calculation Error', 'The split needs to be calculated first. Going back to previous step.');
            if (onComplete) onComplete();
          }}>
            <Text style={styles.goBackButtonText}>Go Back & Recalculate</Text>
          </TouchableOpacity>
        </View>
      );
    }

    // Check if the settlements array itself is missing or invalid within splitResult
    if (!splitResult.settlements || !Array.isArray(splitResult.settlements)) {
      console.error("SettlementScreen: splitResult.settlements is missing or invalid.", splitResult);
      return (
        <View style={styles.errorContainer}>
          <Text style={styles.errorText}>
            Error: No settlement data found. The split might not have been fully calculated.
          </Text>
          <TouchableOpacity style={styles.goBackButton} onPress={() => {
            Alert.alert('Settlement Error', 'Please recalculate the split to generate settlement data.');
            if (onComplete) onComplete();
          }}>
            <Text style={styles.goBackButtonText}>Go Back & Recalculate</Text>
          </TouchableOpacity>
        </View>
      );
    }

  const generateSummary = () => {
    const safeSplitResult = {
        ...splitResult,
        settlements: splitResult.settlements || [], // Ensure it's an array
        transactions: splitResult.transactions || [], // Ensure it's an array
    };
    return splittingService.generateSummary(safeSplitResult, groupData, billData);
  };

  const handleShareSummary = async () => {
    try {
      const summary = generateSummary();
      let shareText = `💰 ${summary.groupName} - Bill Split\n\n`;
      shareText += `📅 Date: ${summary.billDate}\n`;
      shareText += `💵 Total: ₹${summary.totalAmount.toFixed(2)}\n\n`;
      
      shareText += `👥 Individual Amounts:\n`;
      summary.members.forEach(member => {
        const amount = summary.memberTotals[member.id] || 0;
        shareText += `• ${member.name}: ₹${amount.toFixed(2)}\n`;
      });

      if (summary.settlements.length > 0) {
        shareText += `\n💸 Settlements:\n`;
        summary.settlements.forEach(settlement => {
          shareText += `• ${settlement.fromName} → ${settlement.toName}: ₹${settlement.amount.toFixed(2)}\n`;
        });
      }

      shareText += `\nGenerated by SplitRight 📱`;

      await Share.share({
        message: shareText,
        title: `${summary.groupName} - Bill Split`
      });
    } catch (error) {
      Alert.alert('Error', 'Failed to share summary');
    }
  };

  const generateHTMLForPDF = (summary) => {
    return `
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="UTF-8">
        <style>
            body {
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
                margin: 0;
                padding: 20px;
                color: #333;
            }
            .header {
                background: linear-gradient(135deg, #4CAF50, #45a049);
                color: white;
                padding: 20px;
                border-radius: 10px;
                text-align: center;
                margin-bottom: 30px;
            }
            .header h1 {
                margin: 0;
                font-size: 28px;
            }
            .header p {
                margin: 5px 0 0 0;
                opacity: 0.9;
            }
            .summary-section {
                background: #f8f9fa;
                padding: 20px;
                border-radius: 10px;
                margin-bottom: 25px;
                border-left: 4px solid #4CAF50;
            }
            .summary-section h2 {
                margin-top: 0;
                color: #4CAF50;
                font-size: 20px;
            }
            .amount {
                font-size: 24px;
                font-weight: bold;
                color: #4CAF50;
                text-align: center;
                margin: 15px 0;
            }
            .members-table {
                width: 100%;
                border-collapse: collapse;
                margin: 15px 0;
            }
            .members-table th,
            .members-table td {
                padding: 12px;
                text-align: left;
                border-bottom: 1px solid #ddd;
            }
            .members-table th {
                background-color: #4CAF50;
                color: white;
                font-weight: bold;
            }
            .settlement-item {
                background: white;
                border: 2px solid #e9ecef;
                border-radius: 8px;
                padding: 15px;
                margin: 10px 0;
                display: flex;
                justify-content: space-between;
                align-items: center;
            }
            .settlement-text {
                font-size: 16px;
            }
            .payer {
                color: #FF5722;
                font-weight: bold;
            }
            .receiver {
                color: #4CAF50;
                font-weight: bold;
            }
            .settlement-amount {
                font-size: 18px;
                font-weight: bold;
                color: #4CAF50;
            }
            .footer {
                text-align: center;
                color: #666;
                font-size: 12px;
                margin-top: 30px;
                padding-top: 20px;
                border-top: 1px solid #ddd;
            }
        </style>
    </head>
    <body>
        <div class="header">
            <h1>SplitRight - Expense Summary</h1>
            <p>Smart Bill Splitting Made Easy</p>
        </div>
        
        <div class="summary-section">
            <h2>📊 Split Summary</h2>
            <p><strong>Group:</strong> ${summary.groupName}</p>
            <p><strong>Date:</strong> ${summary.billDate}</p>
            <div class="amount">Total Amount: ₹${summary.totalAmount.toFixed(2)}</div>
        </div>
        
        <div class="summary-section">
            <h2>👥 Individual Breakdown</h2>
            <table class="members-table">
                <thead>
                    <tr>
                        <th>Member</th>
                        <th>Amount Owed</th>
                    </tr>
                </thead>
                <tbody>
                    ${summary.members.map(member => {
                        const amount = summary.memberTotals[member.id] || 0;
                        return `
                            <tr>
                                <td>${member.name}</td>
                                <td>₹${amount.toFixed(2)}</td>
                            </tr>
                        `;
                    }).join('')}
                </tbody>
            </table>
        </div>
        
        ${summary.settlements.length > 0 ? `
        <div class="summary-section">
            <h2>💸 Settlement Required</h2>
            ${summary.settlements.map(settlement => `
                <div class="settlement-item">
                    <div class="settlement-text">
                        <span class="payer">${settlement.fromName}</span> → 
                        <span class="receiver">${settlement.toName}</span>
                    </div>
                    <div class="settlement-amount">₹${settlement.amount.toFixed(2)}</div>
                </div>
            `).join('')}
        </div>
        ` : ''}
        
        <div class="footer">
            Generated by SplitRight - Smart Expense Splitter<br>
            ${new Date().toLocaleString()}
        </div>
    </body>
    </html>
    `;
  };

  const handleGeneratePDF = async () => {
    setGeneratingPDF(true);
    try {
      const summary = generateSummary();
      const htmlContent = generateHTMLForPDF(summary);

      console.log(summary,htmlContent)
      
      const options = {
        html: htmlContent,
        fileName: `${summary.groupName.replace(/[^a-z0-9]/gi, '_')}_split_summary`,
        directory: 'Documents',
        base64: false,
        width: 612,
        height: 792,
        padding: 24,
      };

      const pdf = await RNHTMLtoPDF.convert(options);

      console.log('PDF generated:', pdf);
      
      Alert.alert(
        'PDF Generated!',
        `PDF saved to: ${pdf.filePath}`,
        [
          { text: 'OK' },
          {
            text: 'Share PDF',
            onPress: () => sharePDF(pdf.filePath, summary.groupName)
          }
        ]
      );
    } catch (error) {
      console.log('Error generating PDF:', error);
      Alert.alert('Error', 'Failed to generate PDF');
    } finally {
      setGeneratingPDF(false);
    }
  };

  const generateUPIUrl = (settlement) => {
    // Assuming settlement object has toUPI field for receiver's UPI ID
    const upiId = settlement.toUPI || `${settlement.toName.toLowerCase().replace(/\s+/g, '')}@paytm`;
    const amount = settlement.amount.toFixed(2);
    const note = `Split settlement via SplitRight - ${groupData.name}`;
    
    return `upi://pay?pa=${upiId}&pn=${settlement.toName}&am=${amount}&cu=INR&tn=${encodeURIComponent(note)}`;
  };

  const handleGenerateQR = async () => {
    setGeneratingQR(true);
    try {
      const qrData = splitResult.settlements.map((settlement, index) => ({
        id: index,
        settlement,
        upiUrl: generateUPIUrl(settlement),
      }));
      
      setQrCodes(qrData);
      setQrModalVisible(true);
    } catch (error) {
      Alert.alert('Error', 'Failed to generate QR codes');
    } finally {
      setGeneratingQR(false);
    }
  };

  const handleUPIPayment = (upiUrl) => {
    Linking.openURL(upiUrl).catch(() => {
      Alert.alert('Error', 'No UPI app found on your device');
    });
  };

  const memberMap = {};
  groupData.members.forEach(member => {
    memberMap[member.id] = member;
  });

  return (
    <View style={styles.container}>
      <ScrollView contentContainerStyle={styles.scrollViewContent}>
        <Text style={styles.title}>Settlement Complete! 🎉</Text>
        
        <View style={styles.summaryCard}>
          <Text style={styles.summaryTitle}>Final Summary</Text>
          <Text style={styles.groupName}>{groupData.name}</Text>
          <Text style={styles.totalAmount}>
            Total: ₹{billData.grandTotal.toFixed(2)}
          </Text>
        </View>

        {/* Quick Actions */}
        <View style={styles.actionsContainer}>
          <TouchableOpacity
            style={styles.actionButton}
            onPress={handleShareSummary}
          >
            <Text style={styles.actionButtonText}>📤 Share Summary</Text>
          </TouchableOpacity>

          <TouchableOpacity
            style={[styles.actionButton, generatingPDF && styles.disabledButton]}
            onPress={handleGeneratePDF}
            disabled={generatingPDF}
          >
            <Text style={styles.actionButtonText}>
              {generatingPDF ? '⏳ Generating PDF...' : '📄 Export PDF'}
            </Text>
          </TouchableOpacity>

          <TouchableOpacity
            style={[styles.actionButton, generatingQR && styles.disabledButton]}
            onPress={handleGenerateQR}
            disabled={generatingQR}
          >
            <Text style={styles.actionButtonText}>
              {generatingQR ? '⏳ Generating QR...' : '📱 UPI QR Codes'}
            </Text>
          </TouchableOpacity>
        </View>

        {/* Settlements List */}
        {splitResult.settlements.length > 0 && (
          <View style={styles.settlementsContainer}>
            <Text style={styles.settlementsTitle}>💸 Who Pays Whom</Text>
            {splitResult.settlements.map((settlement, index) => (
              <View key={index} style={styles.settlementItem}>
                <View style={styles.settlementInfo}>
                  <Text style={styles.settlementText}>
                    <Text style={styles.payerName}>{settlement.fromName}</Text>
                    {' → '}
                    <Text style={styles.receiverName}>{settlement.toName}</Text>
                  </Text>
                  <Text style={styles.settlementAmount}>
                    ₹{settlement.amount.toFixed(2)}
                  </Text>
                </View>
                <TouchableOpacity
                  style={styles.payButton}
                  onPress={() => handleUPIPayment(generateUPIUrl(settlement))}                
                >
                  <Text style={styles.payButtonText}>Pay now</Text>
                </TouchableOpacity>
              </View>
            ))}
          </View>
        )}
        </ScrollView>

         {/* QR Code Modal */}
      <Modal
        visible={qrModalVisible}
        animationType="slide"
        presentationStyle="pageSheet"
        onRequestClose={() => setQrModalVisible(false)}
      >
        <View style={styles.qrModalContainer}>
          <View style={styles.qrModalHeader}>
            <Text style={styles.qrModalTitle}>UPI Payment QR Codes</Text>
            <TouchableOpacity
              style={styles.closeButton}
              onPress={() => setQrModalVisible(false)}
            >
              <Text style={styles.closeButtonText}>✕</Text>
            </TouchableOpacity>
          </View>
          
          <ScrollView style={styles.qrScrollView}>
            {qrCodes.map((qrData) => (
              <View key={qrData.id} style={styles.qrCodeContainer}>
                <Text style={styles.qrTitle}>
                  {qrData.settlement.fromName} → {qrData.settlement.toName}
                </Text>
                <Text style={styles.qrAmount}>
                  Amount: ₹{qrData.settlement.amount.toFixed(2)}
                </Text>
                
                <View style={styles.qrCodeWrapper}>
                  <QRCode
                    value={qrData.upiUrl}
                    size={200}
                    color="#000"
                    backgroundColor="#fff"
                  />
                </View>
                
                <TouchableOpacity
                  style={styles.upiButton}
                  onPress={() => handleUPIPayment(qrData.upiUrl)}
                >
                  <Text style={styles.upiButtonText}>Open UPI App</Text>
                </TouchableOpacity>
              </View>
            ))}
          </ScrollView>
        </View>
      </Modal>

      </View>
  );
};

const styles = StyleSheet.create({
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#333',
    textAlign: 'center',
    marginBottom: 20,
  },
  scrollViewContent: {
    flexGrow: 1, 
    paddingBottom: 20, 
  },
  summaryCard: {
    backgroundColor: 'white',
    borderRadius: 12,
    padding: 20,
    marginBottom: 20,
    elevation: 2,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    alignItems: 'center',
  },
  summaryTitle: {
    fontSize: 16,
    color: '#666',
    marginBottom: 8,
  },
  groupName: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 8,
  },
  totalAmount: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#4CAF50',
  },
  actionsContainer: {
    marginBottom: 20,
  },
  actionButton: {
    backgroundColor: 'white',
    borderRadius: 12,
    padding: 16,
    marginBottom: 12,
    elevation: 1,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
    alignItems: 'center',
  },
  actionButtonText: {
    fontSize: 16,
    fontWeight: '600',
    color: '#333',
  },
  settlementsTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 12,
    textAlign: 'center',
  },
  settlementItem: {
    backgroundColor: 'white',
    borderRadius: 12,
    padding: 16,
    marginBottom: 12,
    elevation: 1,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
  },
  settlementInfo: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 12,
  },
  payerName: {
    fontWeight: 'bold',
    color: '#FF5722',
  },
  receiverName: {
    fontWeight: 'bold',
    color: '#4CAF50',
  },
  payButton: {
    backgroundColor: '#4CAF50',
    borderRadius: 8,
    padding: 12,
    alignItems: 'center',
  },
  payButtonText: {
    color: 'white',
    fontWeight: 'bold',
    fontSize: 14,
  },
  errorContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
    backgroundColor: '#f8f9fa',
  },
  errorText: {
    fontSize: 16,
    color: '#dc3545',
    textAlign: 'center',
    marginBottom: 20,
    lineHeight: 24,
  },
  goBackButton: {
    backgroundColor: '#4CAF50',
    paddingVertical: 12,
    paddingHorizontal: 20,
    borderRadius: 8,
  },
  goBackButtonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: 'bold',
  },
  settlementText: {
    fontSize: 16,
    color: '#333',
  },
  settlementAmount: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#4CAF50',
  },
  errorContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
    backgroundColor: '#f8f9fa',
  },
  errorText: {
    fontSize: 16,
    color: '#dc3545',
    textAlign: 'center',
    marginBottom: 20,
    lineHeight: 24,
  },
  goBackButton: {
    backgroundColor: '#4CAF50',
    paddingVertical: 12,
    paddingHorizontal: 20,
    borderRadius: 8,
  },
  goBackButtonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: 'bold',
  },
  // QR Modal Styles
  qrModalContainer: {
    flex: 1,
    backgroundColor: '#f5f5f5',
  },
  qrModalHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 20,
    backgroundColor: 'white',
    borderBottomWidth: 1,
    borderBottomColor: '#e9ecef',
  },
  qrModalTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#333',
  },
  closeButton: {
    width: 30,
    height: 30,
    borderRadius: 15,
    backgroundColor: '#f8f9fa',
    justifyContent: 'center',
    alignItems: 'center',
  },
  closeButtonText: {
    fontSize: 18,
    color: '#666',
  },
  qrScrollView: {
    flex: 1,
    padding: 20,
  },
  qrCodeContainer: {
    backgroundColor: 'white',
    borderRadius: 15,
    padding: 20,
    marginBottom: 20,
    alignItems: 'center',
    elevation: 2,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
  },
  qrTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 8,
    textAlign: 'center',
  },
  qrAmount: {
    fontSize: 16,
    color: '#4CAF50',
    fontWeight: 'bold',
    marginBottom: 20,
  },
  qrCodeWrapper: {
    padding: 20,
    backgroundColor: '#fff',
    borderRadius: 10,
    marginBottom: 20,
  },
  upiButton: {
    backgroundColor: '#4CAF50',
    paddingHorizontal: 30,
    paddingVertical: 12,
    borderRadius: 8,
  },
  upiButtonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: 'bold',
  },
});

export default SettlementScreen;